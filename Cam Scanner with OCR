from tkinter import *
from tkinter import filedialog 
from tkinter import messagebox
import cv2
import numpy as np
from skimage.filters import threshold_local
import imutils
from PIL import Image
import pytesseract
from xlwt import Workbook
import pandas as pd

top = Tk()
top.geometry("500x500")
def clk():
    filePath=filedialog.askopenfilename(filetypes=[('jpg', '.jpg'),('png', '.png'),('gif', '.gif')])
    def order_points(pts):
        rect = np.zeros((4, 2), dtype="float32")
        s = pts.sum(axis=1)
        rect[0] = pts[np.argmin(s)]
        rect[2] = pts[np.argmax(s)]  
        diff = np.diff(pts, axis=1)
        rect[1] = pts[np.argmin(diff)]
        rect[3] = pts[np.argmax(diff)]
        return rect
    
    def transformFourPoints(image, pts):
        rect = order_points(pts)
        (tl, tr, br, bl) = rect
    
        widthA = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))
        widthB = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
        maxWidth = max(int(widthA), int(widthB))
    
        heightA = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
        heightB = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
        maxHeight = max(int(heightA), int(heightB))
       
        dst = np.array([[0, 0],[maxWidth - 1, 0],[maxWidth - 1, maxHeight - 1],[0, maxHeight - 1]], dtype="float32")
    
        M = cv2.getPerspectiveTransform(rect, dst)
        warped = cv2.warpPerspective(image, M, (maxWidth, maxHeight))
        
        return warped
       
    image = cv2.imread(filePath)
    ratio = image.shape[0] / 500.0
    orig = image.copy()
    image = imutils.resize(image, height = 500)
    
    
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (5, 5), 0)
    edged = cv2.Canny(gray, 75, 200)
    
    
    #Edge Detection
    cv2.imshow("Image", image)
    cv2.imshow("Edged", edged)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    
    contours,hierarchy=cv2.findContours(edged,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE) 
    contours=sorted(contours,key=cv2.contourArea,reverse=True)
    
    
    for c in contours:
    
        peri = cv2.arcLength(c, True)
        approx = cv2.approxPolyDP(c, 0.02 * peri, True)
    
        if len(approx) == 4:
            target = approx
            break
    
    #Finding contours of paper
    cv2.drawContours(image, [target], -1, (0, 255, 0), 2)  
    cv2.imshow("Outline", image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    
    warped = transformFourPoints(orig, target.reshape(4, 2) * ratio)
    
    warped = cv2.cvtColor(warped, cv2.COLOR_BGR2GRAY)
    T = threshold_local(warped, 11, offset = 10, method = "gaussian")
    warped = (warped > T).astype("uint8") * 255
    
    # Applying perspective transform
    cv2.imshow("Original", imutils.resize(orig, height = 650))
    cv2.imshow("Scanned", imutils.resize(warped, height = 650))
    cv2.waitKey(0)
    B1["bg"]="green";B1["text"]="Image Scanned"
    def saveAs():
        finalFile=filedialog.asksaveasfilename(parent=top,initialdir = "/",title = "Save As", initialfile='scan.png',\
                                                   defaultextension='.jpg',filetypes=[('jpg', '.jpg'),\
                                                                                      ('png', '.png'),('gif', '.gif')])
        cv2.imwrite(finalFile, warped)
        B2["bg"]="green";B2["text"]="Image Saved"
        def extractText():
            iM=Image.open(finalFile)
            text=pytesseract.image_to_string(iM, lang='eng')
            wb = Workbook() 
            sheet1 = wb.add_sheet('Sheet 1')   
            c=0;r=0
            for i in text.split(" "):
                try:
                    if i[-1] in [".","-","(",")"]:
                        sheet1.write(r, c,i[:-1])
                    else: sheet1.write(r, c,i)
                    c+=1
                    if c==20:
                        r+=1;c=0
                except:pass
                
            wb.save('Desktop/example.xls')
            B3["bg"]="green";B3["text"]="Excel Saved"
#             def Special(v):
#                 return v.replace("\n","").replace(",","")
#             df=pd.read_excel("Desktop/example.xls", header=None)
#             for i in df[0]:
#                 print(i)
        B3 = Button(top, text ="Extract text", bg="black",width=25, fg="white", command = extractText);B3.pack()

               
    B2 = Button(top, text ="Save Image", bg="black",width=25, fg="white", command = saveAs);B2.pack()
    
x = Label(top, text="\nPlease choose the Image you wants to scan.\n", bg="grey", fg="white");x.pack(fill=X)
B1 = Button(top, text ="Choose Image", bg="black", fg="white",width=25, command = clk);B1.pack()

top.mainloop()
